import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Download, FileText, Calendar, Users, DollarSign, Target, TrendingUp } from 'lucide-react';
import { motion } from 'framer-motion';
import { useUser } from '@/contexts/UserContext';
import { toast } from '@/hooks/use-toast';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { CSVLink } from 'react-csv';

// Import data
import metricsData from '@/data/metrics.json';
import campaignsData from '@/data/campaigns.json';
import trafficData from '@/data/traffic.json';

export function Reports() {
  const { user, hasPermission } = useUser();
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  const metrics = metricsData;
  const campaigns = campaignsData;
  const traffic = trafficData;

  const reportData = {
    period: 'Last 30 Days',
    generated: new Date().toLocaleDateString(),
    generatedBy: user.name,
    totalRevenue: metrics.revenue.current,
    totalUsers: metrics.users.current,
    totalConversions: metrics.conversions.current,
    averageCTR: metrics.ctr.current,
    growthRate: metrics.growth.current,
    topCampaign: campaigns.reduce((prev, current) => 
      (prev.revenue > current.revenue) ? prev : current
    )
  };

  const csvData = campaigns.map(campaign => ({
    'Campaign Name': campaign.name,
    'Channel': campaign.channel,
    'Clicks': campaign.clicks,
    'CTR (%)': campaign.ctr,
    'Spend ($)': campaign.spend,
    'Conversions': campaign.conversions,
    'Revenue ($)': campaign.revenue,
    'ROAS': (campaign.revenue / campaign.spend).toFixed(2),
    'Status': campaign.status
  }));

  const generatePDFReport = async () => {
    if (!hasPermission('export_data')) {
      toast({
        title: "Access Denied",
        description: "You don't have permission to export data.",
        variant: "destructive"
      });
      return;
    }

    setIsGeneratingPDF(true);

    try {
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();

      // Header
      pdf.setFontSize(24);
      pdf.setTextColor(34, 102, 221); // Primary color
      pdf.text('ADmyBRAND Insights', 20, 30);
      
      pdf.setFontSize(16);
      pdf.setTextColor(100, 100, 100);
      pdf.text('Marketing Analytics Report', 20, 45);

      // Report info
      pdf.setFontSize(10);
      pdf.setTextColor(80, 80, 80);
      pdf.text(`Period: ${reportData.period}`, 20, 60);
      pdf.text(`Generated: ${reportData.generated}`, 20, 70);
      pdf.text(`Generated by: ${reportData.generatedBy}`, 20, 80);

      // Metrics section
      pdf.setFontSize(14);
      pdf.setTextColor(0, 0, 0);
      pdf.text('Key Metrics', 20, 100);

      const metricsY = 115;
      pdf.setFontSize(10);
      pdf.text(`Total Revenue: $${reportData.totalRevenue.toLocaleString()}`, 20, metricsY);
      pdf.text(`Active Users: ${reportData.totalUsers.toLocaleString()}`, 20, metricsY + 10);
      pdf.text(`Conversions: ${reportData.totalConversions.toLocaleString()}`, 20, metricsY + 20);
      pdf.text(`Average CTR: ${reportData.averageCTR}%`, 20, metricsY + 30);
      pdf.text(`Growth Rate: ${reportData.growthRate}%`, 20, metricsY + 40);

      // Top campaign
      pdf.setFontSize(14);
      pdf.text('Top Performing Campaign', 20, metricsY + 60);
      pdf.setFontSize(10);
      pdf.text(`${reportData.topCampaign.name} (${reportData.topCampaign.channel})`, 20, metricsY + 75);
      pdf.text(`Revenue: $${reportData.topCampaign.revenue.toLocaleString()}`, 20, metricsY + 85);
      pdf.text(`ROAS: ${(reportData.topCampaign.revenue / reportData.topCampaign.spend).toFixed(2)}x`, 20, metricsY + 95);

      // Campaign summary table
      pdf.setFontSize(14);
      pdf.text('Campaign Summary', 20, metricsY + 115);

      let tableY = metricsY + 130;
      pdf.setFontSize(8);
      
      // Table headers
      pdf.text('Campaign', 20, tableY);
      pdf.text('Channel', 80, tableY);
      pdf.text('Revenue', 120, tableY);
      pdf.text('ROAS', 160, tableY);
      
      // Table data
      campaigns.slice(0, 10).forEach((campaign, index) => {
        const y = tableY + 10 + (index * 8);
        if (y > pageHeight - 30) return; // Prevent overflow
        
        pdf.text(campaign.name.substring(0, 20), 20, y);
        pdf.text(campaign.channel, 80, y);
        pdf.text(`$${campaign.revenue.toLocaleString()}`, 120, y);
        pdf.text(`${(campaign.revenue / campaign.spend).toFixed(1)}x`, 160, y);
      });

      // Footer
      pdf.setFontSize(8);
      pdf.setTextColor(150, 150, 150);
      pdf.text('Generated by ADmyBRAND Insights Dashboard', 20, pageHeight - 20);

      pdf.save(`admybrand-report-${new Date().toISOString().split('T')[0]}.pdf`);

      toast({
        title: "Report Generated",
        description: "PDF report has been downloaded successfully.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to generate PDF report. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  if (!hasPermission('view_reports')) {
    return (
      <div className="min-h-screen bg-gradient-bg flex items-center justify-center">
        <Card className="w-96">
          <CardContent className="pt-6 text-center">
            <FileText className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">Access Restricted</h3>
            <p className="text-muted-foreground">
              You don't have permission to view reports. Contact your administrator for access.
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-bg">
      <div className="max-w-4xl mx-auto p-6 space-y-6">
        {/* Page Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4 }}
          className="space-y-2"
        >
          <h1 className="text-3xl font-bold text-foreground">Reports & Analytics</h1>
          <p className="text-muted-foreground">
            Export and analyze your marketing performance data
          </p>
        </motion.div>

        {/* Export Actions */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.1 }}
        >
          <Card className="border-0 bg-gradient-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Download className="h-5 w-5" />
                Export Data
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-col sm:flex-row gap-4">
                <Button
                  onClick={generatePDFReport}
                  disabled={isGeneratingPDF}
                  className="flex-1"
                >
                  <FileText className="h-4 w-4 mr-2" />
                  {isGeneratingPDF ? 'Generating...' : 'Export PDF Report'}
                </Button>
                
                <CSVLink
                  data={csvData}
                  filename={`campaigns-${new Date().toISOString().split('T')[0]}.csv`}
                  className="flex-1"
                >
                  <Button variant="outline" className="w-full">
                    <Download className="h-4 w-4 mr-2" />
                    Export CSV Data
                  </Button>
                </CSVLink>
              </div>
            </CardContent>
          </Card>
        </motion.div>

        {/* Report Summary */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4, delay: 0.2 }}
        >
          <Card className="border-0 bg-gradient-card">
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Calendar className="h-5 w-5" />
                Report Summary
              </CardTitle>
              <div className="flex items-center gap-2">
                <Badge variant="outline">Period: {reportData.period}</Badge>
                <Badge variant="outline">Generated: {reportData.generated}</Badge>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <DollarSign className="h-4 w-4" />
                    Total Revenue
                  </div>
                  <p className="text-2xl font-bold">${reportData.totalRevenue.toLocaleString()}</p>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <Users className="h-4 w-4" />
                    Active Users
                  </div>
                  <p className="text-2xl font-bold">{reportData.totalUsers.toLocaleString()}</p>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <Target className="h-4 w-4" />
                    Conversions
                  </div>
                  <p className="text-2xl font-bold">{reportData.totalConversions.toLocaleString()}</p>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <TrendingUp className="h-4 w-4" />
                    Average CTR
                  </div>
                  <p className="text-2xl font-bold">{reportData.averageCTR}%</p>
                </div>
                
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm text-muted-foreground">
                    <TrendingUp className="h-4 w-4" />
                    Growth Rate
                  </div>
                  <p className="text-2xl font-bold">{reportData.growthRate}%</p>
                </div>
              </div>
              
              <Separator className="my-6" />
              
              <div className="space-y-3">
                <h4 className="font-semibold">Top Performing Campaign</h4>
                <div className="p-4 bg-background/50 rounded-lg">
                  <div className="flex justify-between items-start">
                    <div>
                      <p className="font-medium">{reportData.topCampaign.name}</p>
                      <p className="text-sm text-muted-foreground">{reportData.topCampaign.channel}</p>
                    </div>
                    <div className="text-right">
                      <p className="font-bold">${reportData.topCampaign.revenue.toLocaleString()}</p>
                      <p className="text-sm text-success">
                        {(reportData.topCampaign.revenue / reportData.topCampaign.spend).toFixed(2)}x ROAS
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  );
}